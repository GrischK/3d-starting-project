/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/Characters_Sharky.gltf -o src/components/Sharky.jsx -r public 
*/

import React, { useEffect, useState } from 'react'
import { useFrame, useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations, useKeyboardControls } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useControls } from "leva";
import { Controls } from "../App.jsx";

const MOVEMENT_SPEED = 0.05

export function Sharky(props) {
  const group = React.useRef()
  const { scene, animations } = useGLTF('/models/Characters_Sharky.gltf')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)
  console.log(actions)

  const { animation } = useControls({
    animation: { value: "Idle", options: Object.keys(actions) },
  });

  const [currentAnimation, setCurrentAnimation] = useState(null);

  const forwardPressed = useKeyboardControls((state) => state[Controls.forward])
  const backPressed = useKeyboardControls((state) => state[Controls.back])
  const leftPressed = useKeyboardControls((state) => state[Controls.left])
  const rightPressed = useKeyboardControls((state) => state[Controls.right])

  useEffect(() => {
    if (currentAnimation && actions[currentAnimation]) {
      actions[currentAnimation].reset().fadeIn(0.1).play();
    }
    return () => {
      if (currentAnimation && actions[currentAnimation]) {
        actions[currentAnimation].fadeOut(0.25);
      }
    };
  }, [currentAnimation, actions]);

  useFrame(() => {
    if (leftPressed && forwardPressed) {
      group.current.position.z -= MOVEMENT_SPEED * Math.cos(Math.PI / 4);
      group.current.position.x -= MOVEMENT_SPEED * Math.sin(Math.PI / 4);
      group.current.rotation.y = Math.PI + Math.PI / 4;
      if (currentAnimation !== "Run") setCurrentAnimation("Run");
    }
    else if (rightPressed && forwardPressed) {
      group.current.position.z -= MOVEMENT_SPEED * Math.cos(Math.PI / 4);
      group.current.position.x += MOVEMENT_SPEED * Math.sin(Math.PI / 4);
      group.current.rotation.y = Math.PI - Math.PI / 4;
      if (currentAnimation !== "Run") setCurrentAnimation("Run");
    }
    else if (rightPressed && backPressed) {
      group.current.position.z += MOVEMENT_SPEED * Math.cos(Math.PI / 4);
      group.current.position.x += MOVEMENT_SPEED * Math.sin(Math.PI / 4);
      group.current.rotation.y = 35 * Math.PI / 180;
      if (currentAnimation !== "Run") setCurrentAnimation("Run");
    }
    else if (leftPressed && backPressed) {
      group.current.position.z += MOVEMENT_SPEED * Math.cos(Math.PI / 4);
      group.current.position.x -= MOVEMENT_SPEED * Math.sin(Math.PI / 4);
      group.current.rotation.y = -Math.PI / 4;
      if (currentAnimation !== "Run") setCurrentAnimation("Run");
    }
    else if (forwardPressed) {
      group.current.position.z -= MOVEMENT_SPEED;
      group.current.rotation.y = Math.PI;
      if (currentAnimation !== "Run") setCurrentAnimation("Run");
    } else if (backPressed) {
      group.current.position.z += MOVEMENT_SPEED;
      group.current.rotation.y = 0;
      if (currentAnimation !== "Run") setCurrentAnimation("Run");
    } else if (rightPressed) {
      group.current.position.x += MOVEMENT_SPEED;
      group.current.rotation.y = Math.PI / 2;
      if (currentAnimation !== "Run") setCurrentAnimation("Run");
    } else if (leftPressed) {
      group.current.position.x -= MOVEMENT_SPEED;
      group.current.rotation.y = -Math.PI / 2;
      if (currentAnimation !== "Run") setCurrentAnimation("Run");
    } else {
      if (currentAnimation !== "Idle") setCurrentAnimation("Idle");
    }
  });

  return (
    <group ref={group} {...props} dispose={null} castShadow>
      <group name="Scene">
        <group name="CharacterArmature">
          <primitive object={nodes.Root} />
          <skinnedMesh name="Cube001" geometry={nodes.Cube001.geometry} material={materials.Atlas} skeleton={nodes.Cube001.skeleton} />
          <skinnedMesh name="Sharky" geometry={nodes.Sharky.geometry} material={materials.Atlas} skeleton={nodes.Sharky.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/Characters_Sharky.gltf')
